
name: Run checks
on: [push]
jobs:
  r-cmd-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    strategy:
        fail-fast: false
        matrix:
            config:
                - {os: macos-latest,   r: 'release'}
                - {os: ubuntu-latest, r: 'devel'}
                - {os: windows-latest, r: 'release'}
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
        with:
            r-version: ${{ matrix.config.r }}
      - uses: r-lib/actions/setup-pandoc@v2
        with:
            r-version: ${{ matrix.config.r }}
      - name: Install rmarkdown
        run: Rscript -e 'install.packages("rmarkdown")'
      - name: Install tidyverse
        run: Rscript -e 'install.packages("tidyverse")'      
      - name: Install dplyr
        run: Rscript -e 'install.packages("dplyr")' 
      - name: Install kableExtra
        run: Rscript -e 'install.packages("kableExtra")' 
      - name: Install any::rcmdcheck
        run: Rscript -e 'install.packages("rcmdcheck")'  

      - name: Check
        id: rcmdcheck
        run: |
          ## --------------------------------------------------------------------
          options(crayon.enabled = TRUE)
          cat("LOGNAME=", Sys.info()[["user"]], "\n", sep = "", file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          if (Sys.getenv("_R_CHECK_FORCE_SUGGESTS_", "") == "") Sys.setenv("_R_CHECK_FORCE_SUGGESTS_" = "false")
          if (Sys.getenv("_R_CHECK_CRAN_INCOMING_", "") == "") Sys.setenv("_R_CHECK_CRAN_INCOMING_" = "false")
          cat("check-dir-path=", file.path(getwd(), (${{ inputs.check-dir }})), "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
          check_results <- rcmdcheck::rcmdcheck(args = (${{ inputs.args }}), build_args = (${{ inputs.build_args }}), error_on = (${{ inputs.error-on }}), check_dir = (${{ inputs.check-dir }}))
        shell: Rscript {0}
        working-directory: ${{ inputs.working-directory }}
        
      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          echo ::group::Show testthat output
          find check -name 'testthat.Rout*' -exec cat '{}' \; || true
          echo ::endgroup::
        shell: bash
        working-directory: ${{ inputs.working-directory }}
  
      - name: Upload check results
        if: ${{ (failure() && inputs.upload-results != 'never') || (inputs.upload-results != 'false' && inputs.upload-results != 'never') }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name || format('{0}-{1}-r{2}-{3}-results', runner.os, runner.arch, matrix.config.r, matrix.config.id || strategy.job-index ) }}
          path: ${{ steps.rcmdcheck.outputs.check-dir-path }}
  
      - name: Upload snapshots
        if: ${{ inputs.upload-snapshots != 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.snapshot-artifact-name || format('{0}-{1}-r{2}-{3}-testthat-snapshots', runner.os, runner.arch, matrix.config.r, matrix.config.id || strategy.job-index ) }}
          path: ${{ steps.rcmdcheck.outputs.check-dir-path }}/**/tests*/testthat/_snaps
          if-no-files-found: ignore
